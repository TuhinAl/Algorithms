#include<bits/stdc++.h>
using namespace std;



struct Vertex {
	char name;
	int mark;
	struct Node* list;
};
struct Node {
	struct Vertex* vertex;
	struct Node* next;
};

Vertex* new_vertex(char name)
{
    Vertex* vertex= (Vertex*)malloc(sizeof(Vertex));
    vertex->name=name;
    vertex->list=0;
    vertex->mark=0;
    return vertex;

}
void do_connect(Vertex* a, Vertex* b)
{
    Node* node = (Node*)malloc (sizeof(Node)) ;
    node->vertex=b;
    node->next=a->list;
    a->list=node;
}

void connect(Vertex* a, Vertex* b){
    do_connect(a,b);
    do_connect(b,a);
}
void visitFunction(Vertex* vertex) {
	printf ("\n%d-> %c", vertex->mark, vertex->name);
}

void searchBFS(Vertex *vertex, int* counter) {
	Node *createQueue, *frontValue, *rear, *p, *temp;
	Vertex *vert;
	vertex->mark =++(*counter);
	visitFunction(vertex);
	createQueue = (Node*)malloc(sizeof(Node));
	createQueue->vertex = vertex;
	createQueue->next = 0;
	frontValue = createQueue;
	rear  = createQueue;

	while (frontValue != 0) {
		p = frontValue->vertex->list;
		while (p != 0) {
			vert = p->vertex;

			if (vert->mark == 0) {
				Node* nextQueue;

				vert->mark =++(*counter);
				visitFunction(vert);

				nextQueue = (Node*)malloc(sizeof(Node));
				nextQueue->vertex = vert;
				nextQueue->next = 0;
				rear->next = nextQueue;
				rear = nextQueue;
			}
			p = p->next;
		}

		temp = frontValue;
		frontValue = frontValue->next;
		free (temp);
	}



}



void bfs(Vertex *graph[]) {
	int i;
	int counter = 0;

	for (i = 0; i < 10; i ++) {
		graph[i]->mark = 0;
	}
	for (i = 0; i < 10; i ++) {
		if (graph[i]->mark ==0) {
			searchBFS(graph[i], &counter);
		}
	}
}


int main ()
{

Vertex* graph[10]= {new_vertex('A'),new_vertex('B'),new_vertex('C'),new_vertex('D'),new_vertex('E'),new_vertex('F'),new_vertex('G'),new_vertex('H'),new_vertex('I'),new_vertex('J')};
Vertex** p= graph;


connect(graph[0],graph[2]);
connect(graph[0],graph[4]);
connect(graph[0],graph[3]);
connect(graph[1],graph[4]);
connect(graph[1],graph[5]);
connect(graph[2],graph[3]);
connect(graph[2],graph[5]);
connect(graph[4],graph[5]);
connect(graph[6],graph[7]);
connect(graph[6],graph[9]);
connect(graph[7],graph[8]);
connect(graph[8],graph[9]);


printf ("Bfs List is :\n");
bfs(graph);

}

